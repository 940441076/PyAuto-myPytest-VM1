{"uid":"c3acca02204ce1f8","name":"设置","fullName":"testcases.imageView.test_imageView.Test_ImageViewPage#test_systemSet","historyId":"f39b56894c7731b0981e6f3b1e7398ff","time":{"start":1691375288195,"stop":1691375349301,"duration":61106},"description":"设置：回撤类型，图像窗宽窗位风格，图像显示范围，","descriptionHtml":"<p>设置：回撤类型，图像窗宽窗位风格，图像显示范围，</p>\n","status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <test_imageView.Test_ImageViewPage object at 0x0000028CA54AF610>\n\n    @allure.title('设置')\n    def test_systemSet(self):\n        allure.dynamic.description('设置：回撤类型，图像窗宽窗位风格，图像显示范围，')\n        try:\n            app = common_util.connect_application()\n            common_util.back_scanImagePage()\n            with allure.step('回撤距离和速度'):\n                setting_btn = app['血管内断层成像系统'].child_window(auto_id=\"btnSetting\", control_type=\"Button\",found_index=0)\n                setting_btn.click_input()\n                pull_len = app['血管内断层成像系统'].child_window(auto_id=\"comPullback\", control_type=\"ComboBox\")\n                pull_len.select(0)\n                content_len = pull_len.texts()\n                length_speed = {}\n                for i in range(len(content_len)):\n                    pull_len.select(i)\n                    time.sleep(0.5)\n                    pull_speed = app['血管内断层成像系统'].child_window(auto_id=\"comPullBackSped\",\n                                                                        control_type=\"ComboBox\")\n                    time.sleep(0.5)\n                    pull_speed.select(0)\n                    length_speed['{}'.format(content_len[i])] = pull_speed.texts()\n                except_length_speed = common_util.read_systemInfo()\n                assert except_length_speed['length_speed'] == length_speed\n            with allure.step('回撤类型'):\n                pull_type = app['血管内断层成像系统'].child_window(auto_id=\"comTriggers\", control_type=\"ComboBox\",\n                                                                   found_index=0)\n                content_type = pull_type.texts()\n                assert content_type == ['自动', '手动']\n                for i in range(len(content_type)):\n                    pull_type.select(i)\n                    time.sleep(1)\n            with allure.step('图像窗宽窗位风格'):\n                window_type = app['血管内断层成像系统'].child_window(auto_id=\"comWindowType\",\n                                                                     control_type=\"ComboBox\", found_index=0)\n                content_type = window_type.texts()\n                assert content_type == ['常规', '暗黑', '高亮', '锐利', '自定义']\n                for i in range(len(content_type)):\n                    window_type.select(i)\n                    time.sleep(1)\n                window_type.select(0)\n            with allure.step('显示范围'):\n                field_type = app['血管内断层成像系统'].child_window(auto_id=\"comField\", control_type=\"ComboBox\",\n                                                                    found_index=0)\n                content_type = field_type.texts()\n                except_type = common_util.read_systemInfo()['field_type']\n                assert content_type == except_type\n                for i in range(len(content_type)):\n>                   field_type.select(i)\n\ntestcases\\imageView\\test_imageView.py:1047: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <uia_controls.ComboBoxWrapper - '', None, 0>, item = 3\n\n    def select(self, item):\n        \"\"\"\n        Select the ComboBox item\n    \n        The item can be either a 0 based index of the item to select\n        or it can be the string that you want to select\n        \"\"\"\n        # ComboBox has to be expanded to populate a list of its children items\n        self.expand()\n        try:\n>           self._select(item)\n\nC:\\Program Files\\Python311\\Lib\\site-packages\\pywinauto\\controls\\uia_controls.py:238: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <uia_controls.ComboBoxWrapper - '', None, 0>, item = 3\n\n    def _select(self, item=None):\n        \"\"\"\n        Find a child item by the name or index and select\n    \n        The action can be applied for dirrent controls with items:\n        ComboBox, TreeView, Tab control\n        \"\"\"\n        if isinstance(item, six.integer_types):\n            item_index = item\n            title = None\n        elif isinstance(item, six.string_types):\n            item_index = 0\n            title = item\n        else:\n            err_msg = u\"unsupported {0} for item {1}\".format(type(item), item)\n            raise ValueError(err_msg)\n    \n        list_ = self.children(title=title)\n        if item_index < len(list_):\n            wrp = list_[item_index]\n>           wrp.iface_selection_item.Select()\nE           _ctypes.COMError: (-2146232828, None, (None, None, None, 0, None))\n\nC:\\Program Files\\Python311\\Lib\\site-packages\\pywinauto\\controls\\uiawrapper.py:676: COMError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_imageView.Test_ImageViewPage object at 0x0000028CA54AF610>\n\n    @allure.title('设置')\n    def test_systemSet(self):\n        allure.dynamic.description('设置：回撤类型，图像窗宽窗位风格，图像显示范围，')\n        try:\n            app = common_util.connect_application()\n            common_util.back_scanImagePage()\n            with allure.step('回撤距离和速度'):\n                setting_btn = app['血管内断层成像系统'].child_window(auto_id=\"btnSetting\", control_type=\"Button\",found_index=0)\n                setting_btn.click_input()\n                pull_len = app['血管内断层成像系统'].child_window(auto_id=\"comPullback\", control_type=\"ComboBox\")\n                pull_len.select(0)\n                content_len = pull_len.texts()\n                length_speed = {}\n                for i in range(len(content_len)):\n                    pull_len.select(i)\n                    time.sleep(0.5)\n                    pull_speed = app['血管内断层成像系统'].child_window(auto_id=\"comPullBackSped\",\n                                                                        control_type=\"ComboBox\")\n                    time.sleep(0.5)\n                    pull_speed.select(0)\n                    length_speed['{}'.format(content_len[i])] = pull_speed.texts()\n                except_length_speed = common_util.read_systemInfo()\n                assert except_length_speed['length_speed'] == length_speed\n            with allure.step('回撤类型'):\n                pull_type = app['血管内断层成像系统'].child_window(auto_id=\"comTriggers\", control_type=\"ComboBox\",\n                                                                   found_index=0)\n                content_type = pull_type.texts()\n                assert content_type == ['自动', '手动']\n                for i in range(len(content_type)):\n                    pull_type.select(i)\n                    time.sleep(1)\n            with allure.step('图像窗宽窗位风格'):\n                window_type = app['血管内断层成像系统'].child_window(auto_id=\"comWindowType\",\n                                                                     control_type=\"ComboBox\", found_index=0)\n                content_type = window_type.texts()\n                assert content_type == ['常规', '暗黑', '高亮', '锐利', '自定义']\n                for i in range(len(content_type)):\n                    window_type.select(i)\n                    time.sleep(1)\n                window_type.select(0)\n            with allure.step('显示范围'):\n                field_type = app['血管内断层成像系统'].child_window(auto_id=\"comField\", control_type=\"ComboBox\",\n                                                                    found_index=0)\n                content_type = field_type.texts()\n                except_type = common_util.read_systemInfo()['field_type']\n                assert content_type == except_type\n                for i in range(len(content_type)):\n                    field_type.select(i)\n                    time.sleep(1)\n                field_type.select(1)\n                close_btn = app['血管内断层成像系统'].child_window(auto_id=\"closeSetting\", control_type=\"Button\")\n                close_btn.click()\n                time.sleep(1)\n        except Exception as e:\n            time.sleep(1)\n            common_util.screen_shot('异常截图')\n            time.sleep(1)\n            common_util.kill_app()\n            time.sleep(2)\n            common_util.connect_application()\n            common_util.add_text(str(e))\n>           assert False\nE           assert False\n\ntestcases\\imageView\\test_imageView.py:1061: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1691373017956,"stop":1691373018017,"duration":61},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1691373018017,"stop":1691373018017,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1691373018017,"stop":1691373018017,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"environ","time":{"start":1691373018017,"stop":1691373018017,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"_xunit_setup_class_fixture_Test_ImageViewPage","time":{"start":1691374723065,"stop":1691374754586,"duration":31521},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"testStage":{"description":"设置：回撤类型，图像窗宽窗位风格，图像显示范围，","status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <test_imageView.Test_ImageViewPage object at 0x0000028CA54AF610>\n\n    @allure.title('设置')\n    def test_systemSet(self):\n        allure.dynamic.description('设置：回撤类型，图像窗宽窗位风格，图像显示范围，')\n        try:\n            app = common_util.connect_application()\n            common_util.back_scanImagePage()\n            with allure.step('回撤距离和速度'):\n                setting_btn = app['血管内断层成像系统'].child_window(auto_id=\"btnSetting\", control_type=\"Button\",found_index=0)\n                setting_btn.click_input()\n                pull_len = app['血管内断层成像系统'].child_window(auto_id=\"comPullback\", control_type=\"ComboBox\")\n                pull_len.select(0)\n                content_len = pull_len.texts()\n                length_speed = {}\n                for i in range(len(content_len)):\n                    pull_len.select(i)\n                    time.sleep(0.5)\n                    pull_speed = app['血管内断层成像系统'].child_window(auto_id=\"comPullBackSped\",\n                                                                        control_type=\"ComboBox\")\n                    time.sleep(0.5)\n                    pull_speed.select(0)\n                    length_speed['{}'.format(content_len[i])] = pull_speed.texts()\n                except_length_speed = common_util.read_systemInfo()\n                assert except_length_speed['length_speed'] == length_speed\n            with allure.step('回撤类型'):\n                pull_type = app['血管内断层成像系统'].child_window(auto_id=\"comTriggers\", control_type=\"ComboBox\",\n                                                                   found_index=0)\n                content_type = pull_type.texts()\n                assert content_type == ['自动', '手动']\n                for i in range(len(content_type)):\n                    pull_type.select(i)\n                    time.sleep(1)\n            with allure.step('图像窗宽窗位风格'):\n                window_type = app['血管内断层成像系统'].child_window(auto_id=\"comWindowType\",\n                                                                     control_type=\"ComboBox\", found_index=0)\n                content_type = window_type.texts()\n                assert content_type == ['常规', '暗黑', '高亮', '锐利', '自定义']\n                for i in range(len(content_type)):\n                    window_type.select(i)\n                    time.sleep(1)\n                window_type.select(0)\n            with allure.step('显示范围'):\n                field_type = app['血管内断层成像系统'].child_window(auto_id=\"comField\", control_type=\"ComboBox\",\n                                                                    found_index=0)\n                content_type = field_type.texts()\n                except_type = common_util.read_systemInfo()['field_type']\n                assert content_type == except_type\n                for i in range(len(content_type)):\n>                   field_type.select(i)\n\ntestcases\\imageView\\test_imageView.py:1047: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <uia_controls.ComboBoxWrapper - '', None, 0>, item = 3\n\n    def select(self, item):\n        \"\"\"\n        Select the ComboBox item\n    \n        The item can be either a 0 based index of the item to select\n        or it can be the string that you want to select\n        \"\"\"\n        # ComboBox has to be expanded to populate a list of its children items\n        self.expand()\n        try:\n>           self._select(item)\n\nC:\\Program Files\\Python311\\Lib\\site-packages\\pywinauto\\controls\\uia_controls.py:238: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <uia_controls.ComboBoxWrapper - '', None, 0>, item = 3\n\n    def _select(self, item=None):\n        \"\"\"\n        Find a child item by the name or index and select\n    \n        The action can be applied for dirrent controls with items:\n        ComboBox, TreeView, Tab control\n        \"\"\"\n        if isinstance(item, six.integer_types):\n            item_index = item\n            title = None\n        elif isinstance(item, six.string_types):\n            item_index = 0\n            title = item\n        else:\n            err_msg = u\"unsupported {0} for item {1}\".format(type(item), item)\n            raise ValueError(err_msg)\n    \n        list_ = self.children(title=title)\n        if item_index < len(list_):\n            wrp = list_[item_index]\n>           wrp.iface_selection_item.Select()\nE           _ctypes.COMError: (-2146232828, None, (None, None, None, 0, None))\n\nC:\\Program Files\\Python311\\Lib\\site-packages\\pywinauto\\controls\\uiawrapper.py:676: COMError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_imageView.Test_ImageViewPage object at 0x0000028CA54AF610>\n\n    @allure.title('设置')\n    def test_systemSet(self):\n        allure.dynamic.description('设置：回撤类型，图像窗宽窗位风格，图像显示范围，')\n        try:\n            app = common_util.connect_application()\n            common_util.back_scanImagePage()\n            with allure.step('回撤距离和速度'):\n                setting_btn = app['血管内断层成像系统'].child_window(auto_id=\"btnSetting\", control_type=\"Button\",found_index=0)\n                setting_btn.click_input()\n                pull_len = app['血管内断层成像系统'].child_window(auto_id=\"comPullback\", control_type=\"ComboBox\")\n                pull_len.select(0)\n                content_len = pull_len.texts()\n                length_speed = {}\n                for i in range(len(content_len)):\n                    pull_len.select(i)\n                    time.sleep(0.5)\n                    pull_speed = app['血管内断层成像系统'].child_window(auto_id=\"comPullBackSped\",\n                                                                        control_type=\"ComboBox\")\n                    time.sleep(0.5)\n                    pull_speed.select(0)\n                    length_speed['{}'.format(content_len[i])] = pull_speed.texts()\n                except_length_speed = common_util.read_systemInfo()\n                assert except_length_speed['length_speed'] == length_speed\n            with allure.step('回撤类型'):\n                pull_type = app['血管内断层成像系统'].child_window(auto_id=\"comTriggers\", control_type=\"ComboBox\",\n                                                                   found_index=0)\n                content_type = pull_type.texts()\n                assert content_type == ['自动', '手动']\n                for i in range(len(content_type)):\n                    pull_type.select(i)\n                    time.sleep(1)\n            with allure.step('图像窗宽窗位风格'):\n                window_type = app['血管内断层成像系统'].child_window(auto_id=\"comWindowType\",\n                                                                     control_type=\"ComboBox\", found_index=0)\n                content_type = window_type.texts()\n                assert content_type == ['常规', '暗黑', '高亮', '锐利', '自定义']\n                for i in range(len(content_type)):\n                    window_type.select(i)\n                    time.sleep(1)\n                window_type.select(0)\n            with allure.step('显示范围'):\n                field_type = app['血管内断层成像系统'].child_window(auto_id=\"comField\", control_type=\"ComboBox\",\n                                                                    found_index=0)\n                content_type = field_type.texts()\n                except_type = common_util.read_systemInfo()['field_type']\n                assert content_type == except_type\n                for i in range(len(content_type)):\n                    field_type.select(i)\n                    time.sleep(1)\n                field_type.select(1)\n                close_btn = app['血管内断层成像系统'].child_window(auto_id=\"closeSetting\", control_type=\"Button\")\n                close_btn.click()\n                time.sleep(1)\n        except Exception as e:\n            time.sleep(1)\n            common_util.screen_shot('异常截图')\n            time.sleep(1)\n            common_util.kill_app()\n            time.sleep(2)\n            common_util.connect_application()\n            common_util.add_text(str(e))\n>           assert False\nE           assert False\n\ntestcases\\imageView\\test_imageView.py:1061: AssertionError","steps":[{"name":"回撤距离和速度","time":{"start":1691375297890,"stop":1691375308487,"duration":10597},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"回撤类型","time":{"start":1691375308487,"stop":1691375312365,"duration":3878},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"图像窗宽窗位风格","time":{"start":1691375312365,"stop":1691375321946,"duration":9581},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"显示范围","time":{"start":1691375321946,"stop":1691375328407,"duration":6461},"status":"broken","statusMessage":"_ctypes.COMError: (-2146232828, None, (None, None, None, 0, None))\n","statusTrace":"  File \"D:\\workspace\\pytest-VM1\\testcases\\imageView\\test_imageView.py\", line 1047, in test_systemSet\n    field_type.select(i)\n  File \"C:\\Program Files\\Python311\\Lib\\site-packages\\pywinauto\\controls\\uia_controls.py\", line 238, in select\n    self._select(item)\n  File \"C:\\Program Files\\Python311\\Lib\\site-packages\\pywinauto\\controls\\uiawrapper.py\", line 676, in _select\n    wrp.iface_selection_item.Select()\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true}],"attachments":[{"uid":"2e6089d10ae79368","name":"异常截图","source":"2e6089d10ae79368.jpg","type":"image/jpg","size":61136},{"uid":"2346609575f8a668","name":"(-2146232828, None, (None, None, None, 0, None))","source":"2346609575f8a668.txt","type":"text/plain","size":0}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"stepsCount":4,"hasContent":true},"afterStages":[{"name":"_xunit_setup_class_fixture_Test_ImageViewPage::0","time":{"start":1691375387334,"stop":1691375387334,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"图像查看界面"},{"name":"tag","value":"run(order=4)"},{"name":"parentSuite","value":"testcases.imageView"},{"name":"suite","value":"test_imageView"},{"name":"subSuite","value":"Test_ImageViewPage"},{"name":"host","value":"DESKTOP-8BNU2EL"},{"name":"thread","value":"924-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.imageView.test_imageView"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["run(order=4)"]},"source":"c3acca02204ce1f8.json","parameterValues":[]}